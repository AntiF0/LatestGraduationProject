{"version":3,"sources":["getFilesAndDirectoriesFromDirectory.js"],"names":["module","exports","getFilesAndDirectoriesFromDirectory","directoryReader","oldEntries","logDropError","onSuccess","readEntries","entries","newEntries","length","setTimeout","error"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,mCAAT,CAA8CC,eAA9C,EAA+DC,UAA/D,EAA2EC,YAA3E,QAAwG;AAAA,MAAf;AAAEC,IAAAA;AAAF,GAAe;AACvHH,EAAAA,eAAe,CAACI,WAAhB,CACGC,OAAD,IAAa;AACX,UAAMC,UAAU,GAAG,CAAC,GAAGL,UAAJ,EAAgB,GAAGI,OAAnB,CAAnB,CADW,CAEX;AACA;;AACA,QAAIA,OAAO,CAACE,MAAZ,EAAoB;AAClBC,MAAAA,UAAU,CAAC,MAAM;AACfT,QAAAA,mCAAmC,CAACC,eAAD,EAAkBM,UAAlB,EAA8BJ,YAA9B,EAA4C;AAAEC,UAAAA;AAAF,SAA5C,CAAnC;AACD,OAFS,EAEP,CAFO,CAAV,CADkB,CAIpB;AACC,KALD,MAKO;AACLA,MAAAA,SAAS,CAACG,UAAD,CAAT;AACD;AACF,GAbH,EAcE;AACCG,EAAAA,KAAD,IAAW;AACTP,IAAAA,YAAY,CAACO,KAAD,CAAZ;AACAN,IAAAA,SAAS,CAACF,UAAD,CAAT;AACD,GAlBH;AAoBD,CArBD","sourcesContent":["/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n *\n * @param {FileSystemDirectoryReader} directoryReader\n * @param {Array} oldEntries\n * @param {Function} logDropError\n * @param {Function} callback - called with ([ all files and directories in that directoryReader ])\n */\nmodule.exports = function getFilesAndDirectoriesFromDirectory (directoryReader, oldEntries, logDropError, { onSuccess }) {\n  directoryReader.readEntries(\n    (entries) => {\n      const newEntries = [...oldEntries, ...entries]\n      // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory()\n      // must be called until it calls the onSuccess with an empty array.\n      if (entries.length) {\n        setTimeout(() => {\n          getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, { onSuccess })\n        }, 0)\n      // Done iterating this particular directory\n      } else {\n        onSuccess(newEntries)\n      }\n    },\n    // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n    (error) => {\n      logDropError(error)\n      onSuccess(oldEntries)\n    },\n  )\n}\n"]}