{"version":3,"sources":["index.js"],"names":["toArray","require","getRelativePath","getFilesAndDirectoriesFromDirectory","module","exports","webkitGetAsEntryApi","dataTransfer","logDropError","files","rootPromises","createPromiseToAddFileOrParseDirectory","entry","Promise","resolve","isFile","file","relativePath","push","error","isDirectory","directoryReader","createReader","onSuccess","entries","all","map","items","forEach","item","webkitGetAsEntry","then"],"mappings":";;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AACA,MAAME,mCAAmC,GAAGF,OAAO,CAAC,uCAAD,CAAnD;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,mBAAT,CAA8BC,YAA9B,EAA4CC,YAA5C,EAA0D;AACzE,QAAMC,KAAK,GAAG,EAAd;AAEA,QAAMC,YAAY,GAAG,EAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,QAAMC,sCAAsC,GAAIC,KAAD,IAAW,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACjF;AACA,QAAIF,KAAK,CAACG,MAAV,EAAkB;AAChB;AACAH,MAAAA,KAAK,CAACI,IAAN,CACGA,IAAD,IAAU;AACR;AACAA,QAAAA,IAAI,CAACC,YAAL,GAAoBf,eAAe,CAACU,KAAD,CAAnC;AACAH,QAAAA,KAAK,CAACS,IAAN,CAAWF,IAAX;AACAF,QAAAA,OAAO;AACR,OANH,EAOE;AACCK,MAAAA,KAAD,IAAW;AACTX,QAAAA,YAAY,CAACW,KAAD,CAAZ;AACAL,QAAAA,OAAO;AACR,OAXH,EAFgB,CAehB;AACD,KAhBD,MAgBO,IAAIF,KAAK,CAACQ,WAAV,EAAuB;AAC5B,YAAMC,eAAe,GAAGT,KAAK,CAACU,YAAN,EAAxB;AACAnB,MAAAA,mCAAmC,CAACkB,eAAD,EAAkB,EAAlB,EAAsBb,YAAtB,EAAoC;AACrEe,QAAAA,SAAS,EAAGC,OAAD,IAAaV,OAAO,CAACD,OAAO,CAACY,GAAR,CAC9BD,OAAO,CAACE,GAAR,CAAYf,sCAAZ,CAD8B,CAAD;AADsC,OAApC,CAAnC;AAKD;AACF,GA1ByD,CAA1D,CAXyE,CAuCzE;;;AACAX,EAAAA,OAAO,CAACO,YAAY,CAACoB,KAAd,CAAP,CACGC,OADH,CACYC,IAAD,IAAU;AACjB,UAAMjB,KAAK,GAAGiB,IAAI,CAACC,gBAAL,EAAd,CADiB,CAEjB;;AACA,QAAIlB,KAAJ,EAAW;AACTF,MAAAA,YAAY,CAACQ,IAAb,CAAkBP,sCAAsC,CAACC,KAAD,CAAxD;AACD;AACF,GAPH;AASA,SAAOC,OAAO,CAACY,GAAR,CAAYf,YAAZ,EACJqB,IADI,CACC,MAAMtB,KADP,CAAP;AAED,CAnDD","sourcesContent":["const toArray = require('../../../toArray')\nconst getRelativePath = require('./getRelativePath')\nconst getFilesAndDirectoriesFromDirectory = require('./getFilesAndDirectoriesFromDirectory')\n\nmodule.exports = function webkitGetAsEntryApi (dataTransfer, logDropError) {\n  const files = []\n\n  const rootPromises = []\n\n  /**\n   * Returns a resolved promise, when :files array is enhanced\n   *\n   * @param {(FileSystemFileEntry|FileSystemDirectoryEntry)} entry\n   * @returns {Promise} - empty promise that resolves when :files is enhanced with a file\n   */\n  const createPromiseToAddFileOrParseDirectory = (entry) => new Promise((resolve) => {\n    // This is a base call\n    if (entry.isFile) {\n      // Creates a new File object which can be used to read the file.\n      entry.file(\n        (file) => {\n          // eslint-disable-next-line no-param-reassign\n          file.relativePath = getRelativePath(entry)\n          files.push(file)\n          resolve()\n        },\n        // Make sure we resolve on error anyway, it's fine if only one file couldn't be read!\n        (error) => {\n          logDropError(error)\n          resolve()\n        },\n      )\n      // This is a recursive call\n    } else if (entry.isDirectory) {\n      const directoryReader = entry.createReader()\n      getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {\n        onSuccess: (entries) => resolve(Promise.all(\n          entries.map(createPromiseToAddFileOrParseDirectory),\n        )),\n      })\n    }\n  })\n\n  // For each dropped item, - make sure it's a file/directory, and start deepening in!\n  toArray(dataTransfer.items)\n    .forEach((item) => {\n      const entry = item.webkitGetAsEntry()\n      // :entry can be null when we drop the url e.g.\n      if (entry) {\n        rootPromises.push(createPromiseToAddFileOrParseDirectory(entry))\n      }\n    })\n\n  return Promise.all(rootPromises)\n    .then(() => files)\n}\n"]}