{"version":3,"sources":["UIPlugin.js"],"names":["render","require","findDOMElement","BasePlugin","debounce","fn","calling","latestArgs","args","Promise","resolve","then","UIPlugin","mount","target","plugin","callerPluginName","id","targetElement","isTargetDOMEl","uppyRootElement","document","createDocumentFragment","state","uppy","getPlugin","afterUpdate","log","opts","replaceTargetContent","innerHTML","getState","el","firstElementChild","appendChild","onMount","targetPlugin","Target","iteratePlugins","p","parent","addTarget","message","Error","update","unmount","remove","onUnmount","module","exports"],"mappings":"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","sourcesContent":["const { render } = require('preact')\nconst findDOMElement = require('@uppy/utils/lib/findDOMElement')\n\nconst BasePlugin = require('./BasePlugin')\n\n/**\n * Defer a frequent call to the microtask queue.\n *\n * @param {() => T} fn\n * @returns {Promise<T>}\n */\nfunction debounce (fn) {\n  let calling = null\n  let latestArgs = null\n  return (...args) => {\n    latestArgs = args\n    if (!calling) {\n      calling = Promise.resolve().then(() => {\n        calling = null\n        // At this point `args` may be different from the most\n        // recent state, if multiple calls happened since this task\n        // was queued. So we use the `latestArgs`, which definitely\n        // is the most recent call.\n        return fn(...latestArgs)\n      })\n    }\n    return calling\n  }\n}\n\n/**\n * UIPlugin is the extended version of BasePlugin to incorporate rendering with Preact.\n * Use this for plugins that need a user interface.\n *\n * For plugins without an user interface, see BasePlugin.\n */\nclass UIPlugin extends BasePlugin {\n  #updateUI\n\n  /**\n   * Check if supplied `target` is a DOM element or an `object`.\n   * If it’s an object — target is a plugin, and we search `plugins`\n   * for a plugin with same name and return its target.\n   */\n  mount (target, plugin) {\n    const callerPluginName = plugin.id\n\n    const targetElement = findDOMElement(target)\n\n    if (targetElement) {\n      this.isTargetDOMEl = true\n      // When target is <body> with a single <div> element,\n      // Preact thinks it’s the Uppy root element in there when doing a diff,\n      // and destroys it. So we are creating a fragment (could be empty div)\n      const uppyRootElement = document.createDocumentFragment()\n\n      // API for plugins that require a synchronous rerender.\n      this.#updateUI = debounce((state) => {\n        // plugin could be removed, but this.rerender is debounced below,\n        // so it could still be called even after uppy.removePlugin or uppy.close\n        // hence the check\n        if (!this.uppy.getPlugin(this.id)) return\n        render(this.render(state), uppyRootElement)\n        this.afterUpdate()\n      })\n\n      this.uppy.log(`Installing ${callerPluginName} to a DOM element '${target}'`)\n\n      if (this.opts.replaceTargetContent) {\n        // Doing render(h(null), targetElement), which should have been\n        // a better way, since because the component might need to do additional cleanup when it is removed,\n        // stopped working — Preact just adds null into target, not replacing\n        targetElement.innerHTML = ''\n      }\n\n      render(this.render(this.uppy.getState()), uppyRootElement)\n      this.el = uppyRootElement.firstElementChild\n      targetElement.appendChild(uppyRootElement)\n\n      this.onMount()\n\n      return this.el\n    }\n\n    let targetPlugin\n    if (typeof target === 'object' && target instanceof UIPlugin) {\n      // Targeting a plugin *instance*\n      targetPlugin = target\n    } else if (typeof target === 'function') {\n      // Targeting a plugin type\n      const Target = target\n      // Find the target plugin instance.\n      this.uppy.iteratePlugins(p => {\n        if (p instanceof Target) {\n          targetPlugin = p\n          return false\n        }\n      })\n    }\n\n    if (targetPlugin) {\n      this.uppy.log(`Installing ${callerPluginName} to ${targetPlugin.id}`)\n      this.parent = targetPlugin\n      this.el = targetPlugin.addTarget(plugin)\n\n      this.onMount()\n      return this.el\n    }\n\n    this.uppy.log(`Not installing ${callerPluginName}`)\n\n    let message = `Invalid target option given to ${callerPluginName}.`\n    if (typeof target === 'function') {\n      message += ' The given target is not a Plugin class. '\n        + 'Please check that you\\'re not specifying a React Component instead of a plugin. '\n        + 'If you are using @uppy/* packages directly, make sure you have only 1 version of @uppy/core installed: '\n        + 'run `npm ls @uppy/core` on the command line and verify that all the versions match and are deduped correctly.'\n    } else {\n      message += 'If you meant to target an HTML element, please make sure that the element exists. '\n        + 'Check that the <script> tag initializing Uppy is right before the closing </body> tag at the end of the page. '\n        + '(see https://github.com/transloadit/uppy/issues/1042)\\n\\n'\n        + 'If you meant to target a plugin, please confirm that your `import` statements or `require` calls are correct.'\n    }\n    throw new Error(message)\n  }\n\n  update (state) {\n    if (this.el != null) {\n      this.#updateUI?.(state)\n    }\n  }\n\n  unmount () {\n    if (this.isTargetDOMEl) {\n      this.el?.remove()\n    }\n    this.onUnmount()\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  onMount () {}\n\n  // eslint-disable-next-line class-methods-use-this\n  onUnmount () {}\n}\n\nmodule.exports = UIPlugin\n"]}