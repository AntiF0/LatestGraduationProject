{"version":3,"sources":["Uppy.js"],"names":["Translator","require","ee","nanoid","throttle","prettierBytes","match","DefaultStore","getFileType","getFileNameAndExtension","generateFileID","supportsUploadProgress","getFileName","justErrorsLogger","debugLogger","locale","RestrictionError","Error","constructor","isRestriction","AggregateError","globalThis","errors","message","AggregateRestrictionError","Symbol","for","Uppy","opts","Object","create","Set","updateOnlineStatus","bind","defaultLocale","defaultOptions","id","autoProceed","allowMultipleUploads","allowMultipleUploadBatches","debug","restrictions","maxFileSize","minFileSize","maxTotalFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","requiredMetaFields","meta","onBeforeFileAdded","currentFile","onBeforeUpload","files","store","logger","infoTimeout","log","VERSION","Array","isArray","TypeError","i18nInit","calculateProgress","leading","trailing","setState","plugins","currentUploads","allowNewUpload","capabilities","uploadProgress","individualCancellation","resumableUploads","totalProgress","info","recoveredState","subscribe","prevState","nextState","patch","emit","updateAll","window","event","args","on","callback","once","off","state","iteratePlugins","plugin","update","getState","setFileState","fileID","translator","i18n","translate","i18nArray","translateArray","setOptions","newOpts","setMeta","resetProgress","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","keys","forEach","updatedFile","progress","addPreProcessor","fn","add","removePreProcessor","delete","addPostProcessor","removePostProcessor","addUploader","removeUploader","data","updatedMeta","setFileMeta","newMeta","getFile","getFiles","values","getObjectOfFilesPerState","filesObject","error","inProgressFiles","filter","newFiles","file","startedFiles","preprocess","postprocess","uploadStartedFiles","pausedFiles","isPaused","completeFiles","erroredFiles","inProgressNotPausedFiles","processingFiles","isUploadStarted","length","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","some","isGhost","validateRestrictions","result","err","reason","checkIfFileAlreadyExists","addFile","newFile","name","type","addFiles","fileDescriptors","i","push","subError","smart_count","details","removeFiles","fileIDs","updatedUploads","removedFiles","fileIsNotRemoved","uploadFileID","undefined","uploadID","newFileIDs","stateUpdate","calculateTotalProgress","removedFileIDs","join","removeFile","pauseResume","wasPaused","pauseAll","inProgressUpdatedFiles","resumeAll","retryAll","filesToRetry","Promise","resolve","successful","failed","forceAllowNewUpload","cancelAll","retryUpload","reset","logout","provider","canHavePercentage","Number","isFinite","bytesTotal","Math","round","inProgress","sizedFiles","unsizedFiles","progressMax","currentProgress","reduce","acc","totalSize","averageSize","uploadedSize","online","navigator","onLine","wasOffline","getID","use","Plugin","msg","pluginId","existsPluginAlready","getPlugin","install","foundPlugin","find","method","flat","removePlugin","instance","uninstall","list","index","findIndex","item","splice","updatedState","close","removeEventListener","hideInfo","slice","duration","isComplexMessage","setTimeout","warn","restore","reject","addResultData","currentUpload","upload","uploader","onBeforeUploadResult","then","catch","currentlyUploadingFiles","flatMap","curr","waitingFileIDs","indexOf","showInformer","isCorrectFileType","replace","extension","toLowerCase","substr","allowedFileTypesString","types","size","totalFilesSize","f","hasOwnProperty","prototype","missingFields","call","fileName","throwErr","missingRequiredMetaFields","logMessageWithDetails","fileDescriptor","fileType","fileExtension","isRemote","Boolean","source","remote","preview","onBeforeFileAddedResult","filesArray","map","scheduledAutoProceed","stack","errorHandler","response","errorMsg","newError","Date","now","uploadResp","mode","uploadURL","addEventListener","step","restoreStep","steps","updatedUpload","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable max-classes-per-file */\n/* global AggregateError */\n\n'use strict'\n\nconst Translator = require('@uppy/utils/lib/Translator')\nconst ee = require('namespace-emitter')\nconst { nanoid } = require('nanoid/non-secure')\nconst throttle = require('lodash.throttle')\nconst prettierBytes = require('@transloadit/prettier-bytes')\nconst match = require('mime-match')\nconst DefaultStore = require('@uppy/store-default')\nconst getFileType = require('@uppy/utils/lib/getFileType')\nconst getFileNameAndExtension = require('@uppy/utils/lib/getFileNameAndExtension')\nconst generateFileID = require('@uppy/utils/lib/generateFileID')\nconst supportsUploadProgress = require('./supportsUploadProgress')\nconst getFileName = require('./getFileName')\nconst { justErrorsLogger, debugLogger } = require('./loggers')\n\nconst locale = require('./locale')\n\n// Exported from here.\nclass RestrictionError extends Error {\n  constructor (...args) {\n    super(...args)\n    this.isRestriction = true\n  }\n}\nif (typeof AggregateError === 'undefined') {\n  // eslint-disable-next-line no-global-assign\n  globalThis.AggregateError = class AggregateError extends Error {\n    constructor (errors, message) {\n      super(message)\n      this.errors = errors\n    }\n  }\n}\n\nclass AggregateRestrictionError extends AggregateError {\n  constructor (...args) {\n    super(...args)\n    this.isRestriction = true\n  }\n}\n\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\nclass Uppy {\n  // eslint-disable-next-line global-require\n  static VERSION = require('../package.json').version\n\n  /** @type {Record<string, BasePlugin[]>} */\n  #plugins = Object.create(null)\n\n  #storeUnsubscribe\n\n  #emitter = ee()\n\n  #preProcessors = new Set()\n\n  #uploaders = new Set()\n\n  #postProcessors = new Set()\n\n  /**\n   * Instantiate Uppy\n   *\n   * @param {object} opts — Uppy options\n   */\n  constructor (opts) {\n    this.defaultLocale = locale\n\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: false,\n      /**\n       * @deprecated The method should not be used\n       */\n      allowMultipleUploads: true,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: {\n        maxFileSize: null,\n        minFileSize: null,\n        maxTotalFileSize: null,\n        maxNumberOfFiles: null,\n        minNumberOfFiles: null,\n        allowedFileTypes: null,\n        requiredMetaFields: [],\n      },\n      meta: {},\n      onBeforeFileAdded: (currentFile) => currentFile,\n      onBeforeUpload: (files) => files,\n      store: DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000,\n    }\n\n    // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n    this.opts = {\n      ...defaultOptions,\n      ...opts,\n      restrictions: {\n        ...defaultOptions.restrictions,\n        ...(opts && opts.restrictions),\n      },\n    }\n\n    // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions\n    if (opts && opts.logger && opts.debug) {\n      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning')\n    } else if (opts && opts.debug) {\n      this.opts.logger = debugLogger\n    }\n\n    this.log(`Using Core v${this.constructor.VERSION}`)\n\n    if (this.opts.restrictions.allowedFileTypes\n        && this.opts.restrictions.allowedFileTypes !== null\n        && !Array.isArray(this.opts.restrictions.allowedFileTypes)) {\n      throw new TypeError('`restrictions.allowedFileTypes` must be an array')\n    }\n\n    this.i18nInit()\n\n    // ___Why throttle at 500ms?\n    //    - We must throttle at >250ms for superfocus in Dashboard to work well\n    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n    //    - We must throttle at around >500ms to avoid performance lags.\n    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, { leading: true, trailing: true })\n\n    this.store = this.opts.store\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      allowNewUpload: true,\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false,\n      },\n      totalProgress: 0,\n      meta: { ...this.opts.meta },\n      info: [],\n      recoveredState: null,\n    })\n\n    this.#storeUnsubscribe = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch)\n      this.updateAll(nextState)\n    })\n\n    // Exposing uppy object on window for debugging and testing\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window[this.opts.id] = this\n    }\n\n    this.#addListeners()\n  }\n\n  emit (event, ...args) {\n    this.#emitter.emit(event, ...args)\n  }\n\n  on (event, callback) {\n    this.#emitter.on(event, callback)\n    return this\n  }\n\n  once (event, callback) {\n    this.#emitter.once(event, callback)\n    return this\n  }\n\n  off (event, callback) {\n    this.#emitter.off(event, callback)\n    return this\n  }\n\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n  updateAll (state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state)\n    })\n  }\n\n  /**\n   * Updates state with a patch\n   *\n   * @param {object} patch {foo: 'bar'}\n   */\n  setState (patch) {\n    this.store.setState(patch)\n  }\n\n  /**\n   * Returns current state.\n   *\n   * @returns {object}\n   */\n  getState () {\n    return this.store.getState()\n  }\n\n  /**\n   * Back compat for when uppy.state is used instead of uppy.getState().\n   *\n   * @deprecated\n   */\n  get state () {\n    // Here, state is a non-enumerable property.\n    return this.getState()\n  }\n\n  /**\n   * Shorthand to set state for a specific file.\n   */\n  setFileState (fileID, state) {\n    if (!this.getState().files[fileID]) {\n      throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`)\n    }\n\n    this.setState({\n      files: { ...this.getState().files, [fileID]: { ...this.getState().files[fileID], ...state } },\n    })\n  }\n\n  i18nInit () {\n    const translator = new Translator([this.defaultLocale, this.opts.locale])\n    this.i18n = translator.translate.bind(translator)\n    this.i18nArray = translator.translateArray.bind(translator)\n    this.locale = translator.locale\n  }\n\n  setOptions (newOpts) {\n    this.opts = {\n      ...this.opts,\n      ...newOpts,\n      restrictions: {\n        ...this.opts.restrictions,\n        ...(newOpts && newOpts.restrictions),\n      },\n    }\n\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta)\n    }\n\n    this.i18nInit()\n\n    if (newOpts.locale) {\n      this.iteratePlugins((plugin) => {\n        plugin.setOptions()\n      })\n    }\n\n    // Note: this is not the preact `setState`, it's an internal function that has the same name.\n    this.setState() // so that UI re-renders with new options\n  }\n\n  resetProgress () {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: null,\n    }\n    const files = { ...this.getState().files }\n    const updatedFiles = {}\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = { ...files[fileID] }\n      updatedFile.progress = { ...updatedFile.progress, ...defaultProgress }\n      updatedFiles[fileID] = updatedFile\n    })\n\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0,\n    })\n\n    this.emit('reset-progress')\n  }\n\n  addPreProcessor (fn) {\n    this.#preProcessors.add(fn)\n  }\n\n  removePreProcessor (fn) {\n    return this.#preProcessors.delete(fn)\n  }\n\n  addPostProcessor (fn) {\n    this.#postProcessors.add(fn)\n  }\n\n  removePostProcessor (fn) {\n    return this.#postProcessors.delete(fn)\n  }\n\n  addUploader (fn) {\n    this.#uploaders.add(fn)\n  }\n\n  removeUploader (fn) {\n    return this.#uploaders.delete(fn)\n  }\n\n  setMeta (data) {\n    const updatedMeta = { ...this.getState().meta, ...data }\n    const updatedFiles = { ...this.getState().files }\n\n    Object.keys(updatedFiles).forEach((fileID) => {\n      updatedFiles[fileID] = { ...updatedFiles[fileID], meta: { ...updatedFiles[fileID].meta, ...data } }\n    })\n\n    this.log('Adding metadata:')\n    this.log(data)\n\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles,\n    })\n  }\n\n  setFileMeta (fileID, data) {\n    const updatedFiles = { ...this.getState().files }\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that has been removed: ', fileID)\n      return\n    }\n    const newMeta = { ...updatedFiles[fileID].meta, ...data }\n    updatedFiles[fileID] = { ...updatedFiles[fileID], meta: newMeta }\n    this.setState({ files: updatedFiles })\n  }\n\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n  getFile (fileID) {\n    return this.getState().files[fileID]\n  }\n\n  /**\n   * Get all files in an array.\n   */\n  getFiles () {\n    const { files } = this.getState()\n    return Object.values(files)\n  }\n\n  getObjectOfFilesPerState () {\n    const { files: filesObject, totalProgress, error } = this.getState()\n    const files = Object.values(filesObject)\n    const inProgressFiles = files.filter(({ progress }) => !progress.uploadComplete && progress.uploadStarted)\n    const newFiles =  files.filter((file) => !file.progress.uploadStarted)\n    const startedFiles = files.filter(\n      file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess,\n    )\n    const uploadStartedFiles = files.filter((file) => file.progress.uploadStarted)\n    const pausedFiles = files.filter((file) => file.isPaused)\n    const completeFiles = files.filter((file) => file.progress.uploadComplete)\n    const erroredFiles = files.filter((file) => file.error)\n    const inProgressNotPausedFiles = inProgressFiles.filter((file) => !file.isPaused)\n    const processingFiles = files.filter((file) => file.progress.preprocess || file.progress.postprocess)\n\n    return {\n      newFiles,\n      startedFiles,\n      uploadStartedFiles,\n      pausedFiles,\n      completeFiles,\n      erroredFiles,\n      inProgressFiles,\n      inProgressNotPausedFiles,\n      processingFiles,\n\n      isUploadStarted: uploadStartedFiles.length > 0,\n      isAllComplete: totalProgress === 100\n        && completeFiles.length === files.length\n        && processingFiles.length === 0,\n      isAllErrored: !!error && erroredFiles.length === files.length,\n      isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,\n      isUploadInProgress: inProgressFiles.length > 0,\n      isSomeGhost: files.some(file => file.isGhost),\n    }\n  }\n\n  /**\n   * A public wrapper for _checkRestrictions — checks if a file passes a set of restrictions.\n   * For use in UI pluigins (like Providers), to disallow selecting files that won’t pass restrictions.\n   *\n   * @param {object} file object to check\n   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n   * @returns {object} { result: true/false, reason: why file didn’t pass restrictions }\n   */\n  validateRestrictions (file, files) {\n    try {\n      this.#checkRestrictions(file, files)\n      return {\n        result: true,\n      }\n    } catch (err) {\n      return {\n        result: false,\n        reason: err.message,\n      }\n    }\n  }\n\n  /**\n   * Check if file passes a set of restrictions set in options: maxFileSize, minFileSize,\n   * maxNumberOfFiles and allowedFileTypes.\n   *\n   * @param {object} file object to check\n   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n   * @private\n   */\n  #checkRestrictions (file, files = this.getFiles()) {\n    const { maxFileSize, minFileSize, maxTotalFileSize, maxNumberOfFiles, allowedFileTypes } = this.opts.restrictions\n\n    if (maxNumberOfFiles) {\n      if (files.length + 1 > maxNumberOfFiles) {\n        throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', { smart_count: maxNumberOfFiles })}`)\n      }\n    }\n\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.some((type) => {\n        // check if this is a mime-type\n        if (type.indexOf('/') > -1) {\n          if (!file.type) return false\n          return match(file.type.replace(/;.*?$/, ''), type)\n        }\n\n        // otherwise this is likely an extension\n        if (type[0] === '.' && file.extension) {\n          return file.extension.toLowerCase() === type.substr(1).toLowerCase()\n        }\n        return false\n      })\n\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ')\n        throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', { types: allowedFileTypesString }))\n      }\n    }\n\n    // We can't check maxTotalFileSize if the size is unknown.\n    if (maxTotalFileSize && file.size != null) {\n      let totalFilesSize = 0\n      totalFilesSize += file.size\n      files.forEach((f) => {\n        totalFilesSize += f.size\n      })\n      if (totalFilesSize > maxTotalFileSize) {\n        throw new RestrictionError(this.i18n('exceedsSize', {\n          size: prettierBytes(maxTotalFileSize),\n          file: file.name,\n        }))\n      }\n    }\n\n    // We can't check maxFileSize if the size is unknown.\n    if (maxFileSize && file.size != null) {\n      if (file.size > maxFileSize) {\n        throw new RestrictionError(this.i18n('exceedsSize', {\n          size: prettierBytes(maxFileSize),\n          file: file.name,\n        }))\n      }\n    }\n\n    // We can't check minFileSize if the size is unknown.\n    if (minFileSize && file.size != null) {\n      if (file.size < minFileSize) {\n        throw new RestrictionError(this.i18n('inferiorSize', {\n          size: prettierBytes(minFileSize),\n        }))\n      }\n    }\n  }\n\n  /**\n   * Check if minNumberOfFiles restriction is reached before uploading.\n   *\n   * @private\n   */\n  #checkMinNumberOfFiles (files) {\n    const { minNumberOfFiles } = this.opts.restrictions\n    if (Object.keys(files).length < minNumberOfFiles) {\n      throw new RestrictionError(`${this.i18n('youHaveToAtLeastSelectX', { smart_count: minNumberOfFiles })}`)\n    }\n  }\n\n  /**\n   * Check if requiredMetaField restriction is met for a specific file.\n   *\n   */\n  #checkRequiredMetaFieldsOnFile (file) {\n    const { requiredMetaFields } = this.opts.restrictions\n    const { hasOwnProperty } = Object.prototype\n\n    const errors = []\n    const missingFields = []\n    for (let i = 0; i < requiredMetaFields.length; i++) {\n      if (!hasOwnProperty.call(file.meta, requiredMetaFields[i]) || file.meta[requiredMetaFields[i]] === '') {\n        const err = new RestrictionError(`${this.i18n('missingRequiredMetaFieldOnFile', { fileName: file.name })}`)\n        errors.push(err)\n        missingFields.push(requiredMetaFields[i])\n        this.#showOrLogErrorAndThrow(err, { file, showInformer: false, throwErr: false })\n      }\n    }\n    this.setFileState(file.id, { missingRequiredMetaFields: missingFields })\n    return errors\n  }\n\n  /**\n   * Check if requiredMetaField restriction is met before uploading.\n   *\n   */\n  #checkRequiredMetaFields (files) {\n    const errors = Object.keys(files).flatMap((fileID) => {\n      const file = this.getFile(fileID)\n      return this.#checkRequiredMetaFieldsOnFile(file)\n    })\n\n    if (errors.length) {\n      throw new AggregateRestrictionError(errors, `${this.i18n('missingRequiredMetaField')}`)\n    }\n  }\n\n  /**\n   * Logs an error, sets Informer message, then throws the error.\n   * Emits a 'restriction-failed' event if it’s a restriction error\n   *\n   * @param {object | string} err — Error object or plain string message\n   * @param {object} [options]\n   * @param {boolean} [options.showInformer=true] — Sometimes developer might want to show Informer manually\n   * @param {object} [options.file=null] — File object used to emit the restriction error\n   * @param {boolean} [options.throwErr=true] — Errors shouldn’t be thrown, for example, in `upload-error` event\n   * @private\n   */\n  #showOrLogErrorAndThrow (err, { showInformer = true, file = null, throwErr = true } = {}) {\n    const message = typeof err === 'object' ? err.message : err\n    const details = (typeof err === 'object' && err.details) ? err.details : ''\n\n    // Restriction errors should be logged, but not as errors,\n    // as they are expected and shown in the UI.\n    let logMessageWithDetails = message\n    if (details) {\n      logMessageWithDetails += ` ${details}`\n    }\n    if (err.isRestriction) {\n      this.log(logMessageWithDetails)\n      this.emit('restriction-failed', file, err)\n    } else {\n      this.log(logMessageWithDetails, 'error')\n    }\n\n    // Sometimes informer has to be shown manually by the developer,\n    // for example, in `onBeforeFileAdded`.\n    if (showInformer) {\n      this.info({ message, details }, 'error', this.opts.infoTimeout)\n    }\n\n    if (throwErr) {\n      throw (typeof err === 'object' ? err : new Error(err))\n    }\n  }\n\n  #assertNewUploadAllowed (file) {\n    const { allowNewUpload } = this.getState()\n\n    if (allowNewUpload === false) {\n      this.#showOrLogErrorAndThrow(new RestrictionError(this.i18n('noMoreFilesAllowed')), { file })\n    }\n  }\n\n  checkIfFileAlreadyExists (fileID) {\n    const { files } = this.getState()\n\n    if (files[fileID] && !files[fileID].isGhost) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   *\n   * Note this is extremely side-effectful and should only be done when a file state object\n   * will be added to state immediately afterward!\n   *\n   * The `files` value is passed in because it may be updated by the caller without updating the store.\n   */\n  #checkAndCreateFileStateObject (files, fileDescriptor) {\n    const fileType = getFileType(fileDescriptor)\n    const fileName = getFileName(fileType, fileDescriptor)\n    const fileExtension = getFileNameAndExtension(fileName).extension\n    const isRemote = Boolean(fileDescriptor.isRemote)\n    const fileID = generateFileID({\n      ...fileDescriptor,\n      type: fileType,\n    })\n\n    if (this.checkIfFileAlreadyExists(fileID)) {\n      const error = new RestrictionError(this.i18n('noDuplicates', { fileName }))\n      this.#showOrLogErrorAndThrow(error, { file: fileDescriptor })\n    }\n\n    const meta = fileDescriptor.meta || {}\n    meta.name = fileName\n    meta.type = fileType\n\n    // `null` means the size is unknown.\n    const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null\n\n    let newFile = {\n      source: fileDescriptor.source || '',\n      id: fileID,\n      name: fileName,\n      extension: fileExtension || '',\n      meta: {\n        ...this.getState().meta,\n        ...meta,\n      },\n      type: fileType,\n      data: fileDescriptor.data,\n      progress: {\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: size,\n        uploadComplete: false,\n        uploadStarted: null,\n      },\n      size,\n      isRemote,\n      remote: fileDescriptor.remote || '',\n      preview: fileDescriptor.preview,\n    }\n\n    const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files)\n\n    if (onBeforeFileAddedResult === false) {\n      // Don’t show UI info for this error, as it should be done by the developer\n      this.#showOrLogErrorAndThrow(new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.'), { showInformer: false, fileDescriptor })\n    } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {\n      newFile = onBeforeFileAddedResult\n    }\n\n    try {\n      const filesArray = Object.keys(files).map(i => files[i])\n      this.#checkRestrictions(newFile, filesArray)\n    } catch (err) {\n      this.#showOrLogErrorAndThrow(err, { file: newFile })\n    }\n\n    return newFile\n  }\n\n  // Schedule an upload if `autoProceed` is enabled.\n  #startIfAutoProceed () {\n    if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n      this.scheduledAutoProceed = setTimeout(() => {\n        this.scheduledAutoProceed = null\n        this.upload().catch((err) => {\n          if (!err.isRestriction) {\n            this.log(err.stack || err.message || err)\n          }\n        })\n      }, 4)\n    }\n  }\n\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   *\n   * @param {object} file object to add\n   * @returns {string} id for the added file\n   */\n  addFile (file) {\n    this.#assertNewUploadAllowed(file)\n\n    const { files } = this.getState()\n    let newFile = this.#checkAndCreateFileStateObject(files, file)\n\n    // Users are asked to re-select recovered files without data,\n    // and to keep the progress, meta and everthing else, we only replace said data\n    if (files[newFile.id] && files[newFile.id].isGhost) {\n      newFile = {\n        ...files[newFile.id],\n        data: file.data,\n        isGhost: false,\n      }\n      this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`)\n    }\n\n    this.setState({\n      files: {\n        ...files,\n        [newFile.id]: newFile,\n      },\n    })\n\n    this.emit('file-added', newFile)\n    this.emit('files-added', [newFile])\n    this.log(`Added file: ${newFile.name}, ${newFile.id}, mime type: ${newFile.type}`)\n\n    this.#startIfAutoProceed()\n\n    return newFile.id\n  }\n\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */\n  addFiles (fileDescriptors) {\n    this.#assertNewUploadAllowed()\n\n    // create a copy of the files object only once\n    const files = { ...this.getState().files }\n    const newFiles = []\n    const errors = []\n    for (let i = 0; i < fileDescriptors.length; i++) {\n      try {\n        let newFile = this.#checkAndCreateFileStateObject(files, fileDescriptors[i])\n        // Users are asked to re-select recovered files without data,\n        // and to keep the progress, meta and everthing else, we only replace said data\n        if (files[newFile.id] && files[newFile.id].isGhost) {\n          newFile = {\n            ...files[newFile.id],\n            data: fileDescriptors[i].data,\n            isGhost: false,\n          }\n          this.log(`Replaced blob in a ghost file: ${newFile.name}, ${newFile.id}`)\n        }\n        files[newFile.id] = newFile\n        newFiles.push(newFile)\n      } catch (err) {\n        if (!err.isRestriction) {\n          errors.push(err)\n        }\n      }\n    }\n\n    this.setState({ files })\n\n    newFiles.forEach((newFile) => {\n      this.emit('file-added', newFile)\n    })\n\n    this.emit('files-added', newFiles)\n\n    if (newFiles.length > 5) {\n      this.log(`Added batch of ${newFiles.length} files`)\n    } else {\n      Object.keys(newFiles).forEach(fileID => {\n        this.log(`Added file: ${newFiles[fileID].name}\\n id: ${newFiles[fileID].id}\\n type: ${newFiles[fileID].type}`)\n      })\n    }\n\n    if (newFiles.length > 0) {\n      this.#startIfAutoProceed()\n    }\n\n    if (errors.length > 0) {\n      let message = 'Multiple errors occurred while adding files:\\n'\n      errors.forEach((subError) => {\n        message += `\\n * ${subError.message}`\n      })\n\n      this.info({\n        message: this.i18n('addBulkFilesFailed', { smart_count: errors.length }),\n        details: message,\n      }, 'error', this.opts.infoTimeout)\n\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(errors, message)\n      } else {\n        const err = new Error(message)\n        err.errors = errors\n        throw err\n      }\n    }\n  }\n\n  removeFiles (fileIDs, reason) {\n    const { files, currentUploads } = this.getState()\n    const updatedFiles = { ...files }\n    const updatedUploads = { ...currentUploads }\n\n    const removedFiles = Object.create(null)\n    fileIDs.forEach((fileID) => {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID]\n        delete updatedFiles[fileID]\n      }\n    })\n\n    // Remove files from the `fileIDs` list in each upload.\n    function fileIsNotRemoved (uploadFileID) {\n      return removedFiles[uploadFileID] === undefined\n    }\n\n    Object.keys(updatedUploads).forEach((uploadID) => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved)\n\n      // Remove the upload if no files are associated with it anymore.\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID]\n        return\n      }\n\n      updatedUploads[uploadID] = {\n        ...currentUploads[uploadID],\n        fileIDs: newFileIDs,\n      }\n    })\n\n    const stateUpdate = {\n      currentUploads: updatedUploads,\n      files: updatedFiles,\n    }\n\n    // If all files were removed - allow new uploads,\n    // and clear recoveredState\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true\n      stateUpdate.error = null\n      stateUpdate.recoveredState = null\n    }\n\n    this.setState(stateUpdate)\n    this.calculateTotalProgress()\n\n    const removedFileIDs = Object.keys(removedFiles)\n    removedFileIDs.forEach((fileID) => {\n      this.emit('file-removed', removedFiles[fileID], reason)\n    })\n\n    if (removedFileIDs.length > 5) {\n      this.log(`Removed ${removedFileIDs.length} files`)\n    } else {\n      this.log(`Removed files: ${removedFileIDs.join(', ')}`)\n    }\n  }\n\n  removeFile (fileID, reason = null) {\n    this.removeFiles([fileID], reason)\n  }\n\n  pauseResume (fileID) {\n    if (!this.getState().capabilities.resumableUploads\n         || this.getFile(fileID).uploadComplete) {\n      return undefined\n    }\n\n    const wasPaused = this.getFile(fileID).isPaused || false\n    const isPaused = !wasPaused\n\n    this.setFileState(fileID, {\n      isPaused,\n    })\n\n    this.emit('upload-pause', fileID, isPaused)\n\n    return isPaused\n  }\n\n  pauseAll () {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete\n             && updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = { ...updatedFiles[file], isPaused: true }\n      updatedFiles[file] = updatedFile\n    })\n\n    this.setState({ files: updatedFiles })\n    this.emit('pause-all')\n  }\n\n  resumeAll () {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete\n             && updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({ files: updatedFiles })\n\n    this.emit('resume-all')\n  }\n\n  retryAll () {\n    const updatedFiles = { ...this.getState().files }\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error\n    })\n\n    filesToRetry.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({\n      files: updatedFiles,\n      error: null,\n    })\n\n    this.emit('retry-all', filesToRetry)\n\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: [],\n      })\n    }\n\n    const uploadID = this.#createUpload(filesToRetry, {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  cancelAll () {\n    this.emit('cancel-all')\n\n    const { files } = this.getState()\n\n    const fileIDs = Object.keys(files)\n    if (fileIDs.length) {\n      this.removeFiles(fileIDs, 'cancel-all')\n    }\n\n    this.setState({\n      totalProgress: 0,\n      error: null,\n      recoveredState: null,\n    })\n  }\n\n  retryUpload (fileID) {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false,\n    })\n\n    this.emit('upload-retry', fileID)\n\n    const uploadID = this.#createUpload([fileID], {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  reset () {\n    this.cancelAll()\n  }\n\n  logout () {\n    this.iteratePlugins(plugin => {\n      if (plugin.provider && plugin.provider.logout) {\n        plugin.provider.logout()\n      }\n    })\n  }\n\n  calculateProgress (file, data) {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n      return\n    }\n\n    // bytesTotal may be null or zero; in that case we can't divide by it\n    const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0\n    this.setFileState(file.id, {\n      progress: {\n        ...this.getFile(file.id).progress,\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: canHavePercentage\n          ? Math.round((data.bytesUploaded / data.bytesTotal) * 100)\n          : 0,\n      },\n    })\n\n    this.calculateTotalProgress()\n  }\n\n  calculateTotalProgress () {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = this.getFiles()\n\n    const inProgress = files.filter((file) => {\n      return file.progress.uploadStarted\n        || file.progress.preprocess\n        || file.progress.postprocess\n    })\n\n    if (inProgress.length === 0) {\n      this.emit('progress', 0)\n      this.setState({ totalProgress: 0 })\n      return\n    }\n\n    const sizedFiles = inProgress.filter((file) => file.progress.bytesTotal != null)\n    const unsizedFiles = inProgress.filter((file) => file.progress.bytesTotal == null)\n\n    if (sizedFiles.length === 0) {\n      const progressMax = inProgress.length * 100\n      const currentProgress = unsizedFiles.reduce((acc, file) => {\n        return acc + file.progress.percentage\n      }, 0)\n      const totalProgress = Math.round((currentProgress / progressMax) * 100)\n      this.setState({ totalProgress })\n      return\n    }\n\n    let totalSize = sizedFiles.reduce((acc, file) => {\n      return acc + file.progress.bytesTotal\n    }, 0)\n    const averageSize = totalSize / sizedFiles.length\n    totalSize += averageSize * unsizedFiles.length\n\n    let uploadedSize = 0\n    sizedFiles.forEach((file) => {\n      uploadedSize += file.progress.bytesUploaded\n    })\n    unsizedFiles.forEach((file) => {\n      uploadedSize += (averageSize * (file.progress.percentage || 0)) / 100\n    })\n\n    let totalProgress = totalSize === 0\n      ? 0\n      : Math.round((uploadedSize / totalSize) * 100)\n\n    // hot fix, because:\n    // uploadedSize ended up larger than totalSize, resulting in 1325% total\n    if (totalProgress > 100) {\n      totalProgress = 100\n    }\n\n    this.setState({ totalProgress })\n    this.emit('progress', totalProgress)\n  }\n\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n  #addListeners () {\n    /**\n     * @param {Error} error\n     * @param {object} [file]\n     * @param {object} [response]\n     */\n    const errorHandler = (error, file, response) => {\n      let errorMsg = error.message || 'Unknown error'\n      if (error.details) {\n        errorMsg += ` ${error.details}`\n      }\n\n      this.setState({ error: errorMsg })\n\n      if (file != null && file.id in this.getState().files) {\n        this.setFileState(file.id, {\n          error: errorMsg,\n          response,\n        })\n      }\n    }\n\n    this.on('error', errorHandler)\n\n    this.on('upload-error', (file, error, response) => {\n      errorHandler(error, file, response)\n\n      if (typeof error === 'object' && error.message) {\n        const newError = new Error(error.message)\n        newError.details = error.message\n        if (error.details) {\n          newError.details += ` ${error.details}`\n        }\n        newError.message = this.i18n('failedToUpload', { file: file.name })\n        this.#showOrLogErrorAndThrow(newError, {\n          throwErr: false,\n        })\n      } else {\n        this.#showOrLogErrorAndThrow(error, {\n          throwErr: false,\n        })\n      }\n    })\n\n    this.on('upload', () => {\n      this.setState({ error: null })\n    })\n\n    this.on('upload-started', (file) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: {\n          uploadStarted: Date.now(),\n          uploadComplete: false,\n          percentage: 0,\n          bytesUploaded: 0,\n          bytesTotal: file.size,\n        },\n      })\n    })\n\n    this.on('upload-progress', this.calculateProgress)\n\n    this.on('upload-success', (file, uploadResp) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n\n      const currentProgress = this.getFile(file.id).progress\n      this.setFileState(file.id, {\n        progress: {\n          ...currentProgress,\n          postprocess: this.#postProcessors.size > 0 ? {\n            mode: 'indeterminate',\n          } : null,\n          uploadComplete: true,\n          percentage: 100,\n          bytesUploaded: currentProgress.bytesTotal,\n        },\n        response: uploadResp,\n        uploadURL: uploadResp.uploadURL,\n        isPaused: false,\n      })\n\n      // Remote providers sometimes don't tell us the file size,\n      // but we can know how many bytes we uploaded once the upload is complete.\n      if (file.size == null) {\n        this.setFileState(file.id, {\n          size: uploadResp.bytesUploaded || currentProgress.bytesTotal,\n        })\n      }\n\n      this.calculateTotalProgress()\n    })\n\n    this.on('preprocess-progress', (file, progress) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: { ...this.getFile(file.id).progress, preprocess: progress },\n      })\n    })\n\n    this.on('preprocess-complete', (file) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      const files = { ...this.getState().files }\n      files[file.id] = { ...files[file.id], progress: { ...files[file.id].progress } }\n      delete files[file.id].progress.preprocess\n\n      this.setState({ files })\n    })\n\n    this.on('postprocess-progress', (file, progress) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: { ...this.getState().files[file.id].progress, postprocess: progress },\n      })\n    })\n\n    this.on('postprocess-complete', (file) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      const files = {\n        ...this.getState().files,\n      }\n      files[file.id] = {\n        ...files[file.id],\n        progress: {\n          ...files[file.id].progress,\n        },\n      }\n      delete files[file.id].progress.postprocess\n\n      this.setState({ files })\n    })\n\n    this.on('restored', () => {\n      // Files may have changed--ensure progress is still accurate.\n      this.calculateTotalProgress()\n    })\n\n    this.on('dashboard:file-edit-complete', (file) => {\n      if (file) {\n        this.#checkRequiredMetaFieldsOnFile(file)\n      }\n    })\n\n    // show informer if offline\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('online', this.#updateOnlineStatus)\n      window.addEventListener('offline', this.#updateOnlineStatus)\n      setTimeout(this.#updateOnlineStatus, 3000)\n    }\n  }\n\n  updateOnlineStatus () {\n    const online = typeof window.navigator.onLine !== 'undefined'\n      ? window.navigator.onLine\n      : true\n    if (!online) {\n      this.emit('is-offline')\n      this.info(this.i18n('noInternetConnection'), 'error', 0)\n      this.wasOffline = true\n    } else {\n      this.emit('is-online')\n      if (this.wasOffline) {\n        this.emit('back-online')\n        this.info(this.i18n('connectedToInternet'), 'success', 3000)\n        this.wasOffline = false\n      }\n    }\n  }\n\n  #updateOnlineStatus = this.updateOnlineStatus.bind(this)\n\n  getID () {\n    return this.opts.id\n  }\n\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {object} Plugin object\n   * @param {object} [opts] object with options to be passed to Plugin\n   * @returns {object} self for chaining\n   */\n  // eslint-disable-next-line no-shadow\n  use (Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.`\n        + ' Please verify that the plugin was imported and spelled correctly.'\n      throw new TypeError(msg)\n    }\n\n    // Instantiate\n    const plugin = new Plugin(this, opts)\n    const pluginId = plugin.id\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id')\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type')\n    }\n\n    const existsPluginAlready = this.getPlugin(pluginId)\n    if (existsPluginAlready) {\n      const msg = `Already found a plugin named '${existsPluginAlready.id}'. `\n        + `Tried to use: '${pluginId}'.\\n`\n        + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.'\n      throw new Error(msg)\n    }\n\n    if (Plugin.VERSION) {\n      this.log(`Using ${pluginId} v${Plugin.VERSION}`)\n    }\n\n    if (plugin.type in this.#plugins) {\n      this.#plugins[plugin.type].push(plugin)\n    } else {\n      this.#plugins[plugin.type] = [plugin]\n    }\n    plugin.install()\n\n    return this\n  }\n\n  /**\n   * Find one Plugin by name.\n   *\n   * @param {string} id plugin id\n   * @returns {BasePlugin|undefined}\n   */\n  getPlugin (id) {\n    for (const plugins of Object.values(this.#plugins)) {\n      const foundPlugin = plugins.find(plugin => plugin.id === id)\n      if (foundPlugin != null) return foundPlugin\n    }\n    return undefined\n  }\n\n  [Symbol.for('uppy test: getPlugins')] (type) {\n    return this.#plugins[type]\n  }\n\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param {Function} method that will be run on each plugin\n   */\n  iteratePlugins (method) {\n    Object.values(this.#plugins).flat(1).forEach(method)\n  }\n\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n  removePlugin (instance) {\n    this.log(`Removing plugin ${instance.id}`)\n    this.emit('plugin-remove', instance)\n\n    if (instance.uninstall) {\n      instance.uninstall()\n    }\n\n    const list = this.#plugins[instance.type]\n    // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n    const index = list.findIndex(item => item.id === instance.id)\n    if (index !== -1) {\n      list.splice(index, 1)\n    }\n\n    const state = this.getState()\n    const updatedState = {\n      plugins: {\n        ...state.plugins,\n        [instance.id]: undefined,\n      },\n    }\n    this.setState(updatedState)\n  }\n\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n  close () {\n    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`)\n\n    this.reset()\n\n    this.#storeUnsubscribe()\n\n    this.iteratePlugins((plugin) => {\n      this.removePlugin(plugin)\n    })\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('online', this.#updateOnlineStatus)\n      window.removeEventListener('offline', this.#updateOnlineStatus)\n    }\n  }\n\n  hideInfo () {\n    const { info } = this.getState()\n\n    this.setState({ info: info.slice(1) })\n\n    this.emit('info-hidden')\n  }\n\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   *\n   * @param {string | object} message Message to be displayed by the informer\n   * @param {string} [type]\n   * @param {number} [duration]\n   */\n  info (message, type = 'info', duration = 3000) {\n    const isComplexMessage = typeof message === 'object'\n\n    this.setState({\n      info: [\n        ...this.getState().info,\n        {\n          type,\n          message: isComplexMessage ? message.message : message,\n          details: isComplexMessage ? message.details : null,\n        },\n      ],\n    })\n\n    setTimeout(() => this.hideInfo(), duration)\n\n    this.emit('info-visible')\n  }\n\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   *\n   * @param {string|object} message to log\n   * @param {string} [type] optional `error` or `warning`\n   */\n  log (message, type) {\n    const { logger } = this.opts\n    switch (type) {\n      case 'error': logger.error(message); break\n      case 'warning': logger.warn(message); break\n      default: logger.debug(message); break\n    }\n  }\n\n  /**\n   * Restore an upload by its ID.\n   */\n  restore (uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\n\n    if (!this.getState().currentUploads[uploadID]) {\n      this.#removeUpload(uploadID)\n      return Promise.reject(new Error('Nonexistent upload'))\n    }\n\n    return this.#runUpload(uploadID)\n  }\n\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @returns {string} ID of this upload.\n   */\n  #createUpload (fileIDs, opts = {}) {\n    // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`\n    const { forceAllowNewUpload = false } = opts\n\n    const { allowNewUpload, currentUploads } = this.getState()\n    if (!allowNewUpload && !forceAllowNewUpload) {\n      throw new Error('Cannot create a new upload: already uploading.')\n    }\n\n    const uploadID = nanoid()\n\n    this.emit('upload', {\n      id: uploadID,\n      fileIDs,\n    })\n\n    this.setState({\n      allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,\n\n      currentUploads: {\n        ...currentUploads,\n        [uploadID]: {\n          fileIDs,\n          step: 0,\n          result: {},\n        },\n      },\n    })\n\n    return uploadID\n  }\n\n  [Symbol.for('uppy test: createUpload')] (...args) { return this.#createUpload(...args) }\n\n  #getUpload (uploadID) {\n    const { currentUploads } = this.getState()\n\n    return currentUploads[uploadID]\n  }\n\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */\n  addResultData (uploadID, data) {\n    if (!this.#getUpload(uploadID)) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n      return\n    }\n    const { currentUploads } = this.getState()\n    const currentUpload = { ...currentUploads[uploadID], result: { ...currentUploads[uploadID].result, ...data } }\n    this.setState({\n      currentUploads: { ...currentUploads, [uploadID]: currentUpload },\n    })\n  }\n\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n  #removeUpload (uploadID) {\n    const currentUploads = { ...this.getState().currentUploads }\n    delete currentUploads[uploadID]\n\n    this.setState({\n      currentUploads,\n    })\n  }\n\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   *\n   * @private\n   */\n  async #runUpload (uploadID) {\n    let { currentUploads } = this.getState()\n    let currentUpload = currentUploads[uploadID]\n    const restoreStep = currentUpload.step || 0\n\n    const steps = [\n      ...this.#preProcessors,\n      ...this.#uploaders,\n      ...this.#postProcessors,\n    ]\n    try {\n      for (let step = restoreStep; step < steps.length; step++) {\n        if (!currentUpload) {\n          break\n        }\n        const fn = steps[step]\n\n        const updatedUpload = {\n          ...currentUpload,\n          step,\n        }\n\n        this.setState({\n          currentUploads: {\n            ...currentUploads,\n            [uploadID]: updatedUpload,\n          },\n        })\n\n        // TODO give this the `updatedUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n        await fn(updatedUpload.fileIDs, uploadID)\n\n        // Update currentUpload value in case it was modified asynchronously.\n        currentUploads = this.getState().currentUploads\n        currentUpload = currentUploads[uploadID]\n      }\n    } catch (err) {\n      this.emit('error', err)\n      this.#removeUpload(uploadID)\n      throw err\n    }\n\n    // Set result data.\n    if (currentUpload) {\n      // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n      // stuck in the postprocessing UI while the upload is fully complete.\n      // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n      // all, and never mark the postprocessing as complete. This is fine on its own but we\n      // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n      // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n      // before the postprocessing plugins can emit events.\n      //\n      // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n      // postprocessing completion, we do it instead.\n      currentUpload.fileIDs.forEach((fileID) => {\n        const file = this.getFile(fileID)\n        if (file && file.progress.postprocess) {\n          this.emit('postprocess-complete', file)\n        }\n      })\n\n      const files = currentUpload.fileIDs.map((fileID) => this.getFile(fileID))\n      const successful = files.filter((file) => !file.error)\n      const failed = files.filter((file) => file.error)\n      await this.addResultData(uploadID, { successful, failed, uploadID })\n\n      // Update currentUpload value in case it was modified asynchronously.\n      currentUploads = this.getState().currentUploads\n      currentUpload = currentUploads[uploadID]\n    }\n    // Emit completion events.\n    // This is in a separate function so that the `currentUploads` variable\n    // always refers to the latest state. In the handler right above it refers\n    // to an outdated object without the `.result` property.\n    let result\n    if (currentUpload) {\n      result = currentUpload.result\n      this.emit('complete', result)\n\n      this.#removeUpload(uploadID)\n    }\n    if (result == null) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n    }\n    return result\n  }\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @returns {Promise}\n   */\n  upload () {\n    if (!this.#plugins.uploader?.length) {\n      this.log('No uploader type plugins are used', 'warning')\n    }\n\n    let { files } = this.getState()\n\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files)\n\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'))\n    }\n\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult\n      // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n      this.setState({\n        files,\n      })\n    }\n\n    return Promise.resolve()\n      .then(() => {\n        this.#checkMinNumberOfFiles(files)\n        this.#checkRequiredMetaFields(files)\n      })\n      .catch((err) => {\n        this.#showOrLogErrorAndThrow(err)\n      })\n      .then(() => {\n        const { currentUploads } = this.getState()\n        // get a list of files that are currently assigned to uploads\n        const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs)\n\n        const waitingFileIDs = []\n        Object.keys(files).forEach((fileID) => {\n          const file = this.getFile(fileID)\n          // if the file hasn't started uploading and hasn't already been assigned to an upload..\n          if ((!file.progress.uploadStarted) && (currentlyUploadingFiles.indexOf(fileID) === -1)) {\n            waitingFileIDs.push(file.id)\n          }\n        })\n\n        const uploadID = this.#createUpload(waitingFileIDs)\n        return this.#runUpload(uploadID)\n      })\n      .catch((err) => {\n        this.#showOrLogErrorAndThrow(err, {\n          showInformer: false,\n        })\n      })\n  }\n}\n\nmodule.exports = Uppy\n"]}